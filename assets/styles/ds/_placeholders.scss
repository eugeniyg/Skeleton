@use "mixins";
@use "typography";

%icon {
  font-family: 'icon';
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-size: var(--icon-size, #{mixins.rem(18px)});
  line-height: 1;
  color: var(--icon-color, var(--icon-primary))
}

%flex-items-center {
  display: flex;
  align-items: center;
}

%flex-all-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

%flex-column {
  display: flex;
  flex-direction: column;
}

%link {
  text-decoration: var(--text-decoration, none);
  color: var(--color, var(--button-icn-secondary));
}

%text-elipsis {
  white-space: nowrap;
  text-overflow: ellipsis;
  overflow: hidden;
}

%skip-btn {
  background: var(--bg, transparent);
  color: var(--color, var(--button-text-ghost-high-contrast));
  border: var(--border, 0);
  font-family: 'Rubik', sans-serif;
}

%radius-50 {
  border-radius: 50%;
  overflow: hidden;
}

%none {
  display: none;
}

%scrollbar-hide {
  @supports (scrollbar-width: auto) {
    scrollbar-width: none;
  }

  @supports selector(::-webkit-scrollbar) {
    &::-webkit-scrollbar {
      display: none;
      -ms-overflow-style: none;
    }
  }
}

%scrollbar {
  --scrollbar-color-thumb: var(--field-00-click);
  --scrollbar-color-track: transparent;
  --scrollbar-width: thin;
  --scrollbar-width-legacy: 4px;

  @supports (scrollbar-width: auto) {
    scrollbar-color: var(--scrollbar-color-thumb) var(--scrollbar-color-track);
    scrollbar-width: var(--scrollbar-width);
  }

  @supports selector(::-webkit-scrollbar) {
    &::-webkit-scrollbar-thumb {
      background: var(--scrollbar-color-thumb);
      border-radius: 8px;
    }

    &::-webkit-scrollbar-track {
      background-color: var(--scrollbar-color-track);
    }

    &::-webkit-scrollbar {
      max-width: var(--scrollbar-width-legacy);
      max-height: var(--scrollbar-width-legacy);
    }
  }

  &:hover {
    --fix: ; /* This custom property invalidates styles on hover, thereby enforcing a style recomputation. This is needed to work around a bug in Safari. */
  }
}

%container {
  width: 100%;
  margin: 0 auto;
}

%input-label {
  > .label {
    @include mixins.font(typography.$body-2);
    color: var(--color, var(--text-primary));
    margin-bottom: mixins.rem(8px);
    grid-area: label;
    display: flex;
  }
}

%icon-btn {
  @extend %flex-all-center;
  @include mixins.box(32px);
  border-radius: 8px;
  --color: var(--text-primary);
  --icon-size: 18px;

  @extend %btn-primary;
}

%icon-btn-ghost {
  @extend %flex-all-center;
  @include mixins.box(32px);
  border-radius: 50%;
  background-color: var(--bg, transparent);
  box-shadow: var(--shadow, none);
  --color: var(--button-text-ghost-highContrast);
  --icon-size: 22px;

  @include mixins.use-hover {
    cursor: pointer;
    &:hover {
      --bg: var(--button-bg-secondary-hover);
      --color: var(--button-icn-ghost-hover);
    }
  }

  &:active {
    --bg: var(--button-bg-secondary-click);
    --color: var(--button-icn-ghost-click);
  }

  [disabled] {
    pointer-events: none;
    --bg: transparent;
    --color: var(--button-icn-ghost-disabled);
  }
}

%modal {
  .vfm__content {
    max-width: mixins.rem(400px);
    min-width: mixins.rem(320px);

    @include mixins.media(md) {
      width: auto;
      max-width: unset;
    }
  }

  .container {
    overflow-y: auto;
    max-height: 100%;
    background: var(--layer-01);
    border-top: mixins.rem(12px) solid var(--layer-01);
    border-right: mixins.rem(8px) solid var(--layer-01);
    border-bottom: mixins.rem(12px) solid var(--layer-01);
    border-left: mixins.rem(8px) solid var(--layer-01);
    box-shadow: var(--shadow-modal);
    position: relative;
    width: 100%;
    @extend %scrollbar;

    @include mixins.media(xs) {
      border-radius: 16px;
    }

    @include mixins.media(md) {
      border: none;
      display: flex;
      overflow: hidden;
      width: auto;
    }
  }

  .header {
    display: flex;
    align-items: center;
    margin-bottom: mixins.rem(24px);
    position: absolute;
    padding: #{mixins.rem(16px)} #{mixins.rem(24px)};
    width: 100%;
    top: 0;
    left: 0;
    grid-gap: mixins.rem(8px);

    @include mixins.media(md) {
      position: relative;
      padding: 0;
    }

    .title {
      @include mixins.font(typography.$heading-6);
      color: var(--text-primary);
      text-align: var(--text-align, center);
      flex-grow: 1;
    }
  }

  .slot {
    padding: var(--padding, #{mixins.rem(68px)} #{mixins.rem(8px)} #{mixins.rem(16px)} #{mixins.rem(8px)});
    justify-content: flex-start;
    position: relative;
    --height: auto;

    @include mixins.media(md) {
      padding: #{mixins.rem(32px)};
      background-color: var(--layer-bg);
    }
  }

  .scroll {
    overflow: hidden;
    @extend %scrollbar;
    padding: mixins.rem(16px);
    border: mixins.rem(12px) solid var(--layer-01);

    hr {
      margin: 0;
    }

    @include mixins.media(md) {
      border-top: mixins.rem(12px) solid var(--layer-01);
      border-right: mixins.rem(8px) solid var(--layer-01);
      border-bottom: mixins.rem(12px) solid var(--layer-01);
      width: mixins.rem(400px);
      padding: mixins.rem(24px);
      overflow-y: auto;
      --text-align: left;
    }
  }

  form {
    display: flex;
    flex-direction: column;
    grid-gap: mixins.rem(16px);

    > .btn-primary {
      margin-top: mixins.rem(8px);
    }
  }

  .btn-modal-close {
    --top: 0;
    --right: auto;

    @include mixins.media(xs) {
      --right: #{mixins.rem(8px)};
    }

    @include mixins.media(md) {
      --top: #{mixins.rem(-16px)};
      --right: #{mixins.rem(-8px)};
    }
  }

  .btn-primary {
    --width: 100%;
  }

}

%modal-info {
  .vfm__content {
    max-width: 400px;
    width: 100%;
    margin: 0 mixins.rem(16px);
  }

  .scroll {
    display: flex;
    flex-direction: column;
    overflow-y: auto;
    overflow-x: hidden;
    max-height: 100%;
    background: var(--layer-01);
    border-top: mixins.rem(12px) solid var(--layer-01);
    border-right: mixins.rem(8px) solid var(--layer-01);
    border-bottom: mixins.rem(12px) solid var(--layer-01);
    border-left: mixins.rem(8px) solid var(--layer-01);
    box-shadow: var(--shadow-modal);
    position: relative;
    padding: mixins.rem(24px) mixins.rem(22px) mixins.rem(22px) mixins.rem(22px);
    grid-row-gap: mixins.rem(16px);
    width: 100%;
    @extend %scrollbar;

    border-radius: 16px;

    @include mixins.media(xs) {
      border-radius: 12px;
    }
  }

  .header {
    display: flex;
    align-items: center;
    position: relative;

    .title {
      @include mixins.font(typography.$heading-6);
      color: var(--text-primary);
      text-align: var(--text-align, center);
      flex-grow: 1;
    }
  }

  form {
    display: flex;
    flex-direction: column;
    grid-gap: mixins.rem(16px);

    > .btn-primary {
      margin-top: mixins.rem(8px);
    }
  }

  .btn-modal-close {
    position: absolute;
    --bg: transparent;
    --right: #{mixins.rem(-16px)};
    --top: #{mixins.rem(-8px)};
  }

  .img {
    width: mixins.rem(134px);
    height: auto;
    display: grid;
    margin: 0 auto;
  }

  .text {
    @include mixins.font(typography.$body-3);
    text-align: center;
    color: var(--text-primary);
    margin: 0 0;

    p {
      margin: 0;
    }
  }

  .btn-primary {
    --width: 100%;
    margin: mixins.rem(8px) auto 0;
  }
}

%tb {
  display: grid;
  position: relative;

  .td:first-of-type, .th:first-of-type {

    position: sticky;
    left: 0;
    z-index: 1;
    display: flex;
    align-items: center;
    height: 100%;

    &:after {
      content: '';
      position: absolute;
      top: 0;
      bottom: 0;
      right: 0;
      border-right: 1px solid var(--border-00);
    }

    @include mixins.media(xs) {
      position: relative;

      &:after {
        visibility: hidden;
      }
    }
  }

  .row {
    display: grid;
    grid-auto-flow: column;
    grid-auto-columns: 1fr;
    align-items: center;
    background-color: var(--bg, var(--layer-bg));

    &:first-of-type {
      border-bottom: 1px solid var(--border-00);
    }

    &:nth-child(2n + 3) {
      --bg: var(--layer-01);
    }
  }

  .th {
    padding: mixins.rem(16px);
    color: var(--text-tertiary);
    @include mixins.font(typography.$heading-2);
    position: relative;
    background-color: inherit;
    white-space: nowrap;
  }

  .td {
    padding: mixins.rem(10px) mixins.rem(16px);
    @include mixins.font(typography.$body-2);
    color: var(--text-primary);
    position: relative;
    background-color: inherit;


    p {
      margin: 0;
    }
  }
}


%inputMask {
  box-shadow: inset 0 0 0 1000px var(--field-01);
  -webkit-text-fill-color: var(--text-tertiary);
  -webkit-background-clip: text;

  &:focus {
    -webkit-text-fill-color: var(--text-primary);
  }
}

%btn {
  @extend %skip-btn;
  @extend %link;
  @extend %flex-all-center;
  padding: var(--padding, #{mixins.rem(4px)} #{mixins.rem(16px)});
  border-radius: var(--btn-border-radius, 8px);
  width: var(--width, fit-content);
  height: var(--height, auto);
  grid-column-gap: mixins.rem(4px);
  transition: background-color .1s, color .1s ease-in-out;
  user-select: none;

  &.size-xs {
    @include mixins.font(typography.$heading-1);
    --padding: #{mixins.rem(4px) mixins.rem(16px)};
    --btn-border-radius: 8px;
  }

  &.size-sm {
    @include mixins.font(typography.$heading-2);
    --padding: #{mixins.rem(7px) mixins.rem(20px)};
    --btn-border-radius: 8px;
  }

  &.size-md {
    @include mixins.font(typography.$heading-2);
    --padding: #{mixins.rem(11px) mixins.rem(24px)};
    --btn-border-radius: 12px;
  }

  &.size-lg {
    @include mixins.font(typography.$heading-3);
    --padding: #{mixins.rem(16px) mixins.rem(40px)};
    --btn-border-radius: 12px;
  }
}

%btn-primary {
  @extend %btn;
  --bg: var(--button-bg-primary);
  --color: var(--button-text-primary);

  &:hover {
    cursor: pointer;
    --bg: var(--button-bg-primary-hover);
    --color: var(--button-text-primary-hover);
  }

  &:active, &.is-active {
    --bg: var(--button-bg-primary-click);
    --color: var(--button-text-primary-click);
  }

  &[disabled] {
    pointer-events: none;

    --bg: var(--button-bg-primary-disabled);
    --color: var(--button-text-primary-disabled);
  }
}

%btn-secondary {
  --bg: var(--button-bg-secondary);
  --color: var(--button-text-secondary);

  &:hover {
    cursor: pointer;
    --bg: var(--button-bg-secondary-hover);
    --color: var(--button-text-secondary-hover);
  }

  &:active, &.is-active {
    --bg: var(--button-bg-secondary-click);
    --color: var(--button-text-secondary-click);
  }

  &[disabled] {
    pointer-events: none;
    --bg: var(--button-bg-secondary-disabled);
    --color: var(--button-text-secondary-disabled);
  }
}

%btn-ghost {
  --bg: transparent;
  --color: var(--button-text-ghost-high-contrast);

  &:hover {
    cursor: pointer;
    --bg: var(--button-bg-secondary-hover);
    --color: var(--button-text-ghost-hover);
  }

  &:active, &.is-active {
    --bg: var(--button-bg-secondary-click);
    --color: var(--button-text-ghost-click);
  }

  &[disabled] {
    pointer-events: none;
    --bg: transparent;
    --color: var(--button-text-ghost-disabled);
  }
}

%btn-ghost-low-contrast {
  --bg: transparent;
  --color: var(--button-text-ghost-low-contrast);

  &:hover {
    cursor: pointer;
    --bg: var(--button-bg-secondary-hover);
    --color: var(--button-text-ghost-hover);
  }

  &:active, &.is-active {
    --bg: var(--button-bg-secondary-click);
    --color: var(--button-text-ghost-click);
  }

  &[disabled] {
    pointer-events: none;
    --bg: transparent;
    --color: var(--button-text-ghost-disabled);
  }
}

%btn-icon-secondary {
  --bg: var(--button-bg-secondary);

  .icon {
    --color: var(--button-icon-secondary);
  }

  @include mixins.use-hover {
    &:hover {
      cursor: pointer;
      --bg: var(--button-bg-secondary-hover);

      .icon {
        --color: var(--button-icn-secondary-hover);
      }
    }
  }

  &:active, &.is-active {
    --bg: var(--button-bg-secondary-click);

    .icon {
      --color: var(--icon-contrast);
    }
  }

  &[disabled] {
    pointer-events: none;
    --bg: var(--button-bg-secondary-disabled);

    .icon {
      --color: var(--button-icn-secondary-disabled);
    }
  }
}
