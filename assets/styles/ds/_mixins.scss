@use "variables";
@use "sass:math";

@function strip-unit($num) {
  @if type-of($num) == 'number' and not unitless($num) {
    @return math.div($num, $num * 0 + 1);
  }
  @return $num;
}

@function rem($size, $base: variables.$base-font-size) {
  @return (#{math.div(strip-unit($size), strip-unit($base))}rem);
}

@mixin font($type) {
  @each $prop, $val in $type {
    @if $prop == 'font-size' and variables.$use-rem == 1 {
      #{$prop}: var(--#{$prop}, #{rem($val)});
    } @else {
      #{$prop}: var(--#{$prop}, #{$val});
    }
  }
}

@mixin upd-font($type) {
  @each $prop, $val in $type {
    @if $prop == 'font-size' and variables.$use-rem == 1 {
      --#{$prop}: #{rem($val)};
    } @else {
      --#{$prop}: #{$val};
    }
  }
}

@mixin box($size) {
  width: var(--width, #{rem($size)});
  height: var(--height, #{rem($size)});
  min-width: var(--min-width, #{rem($size)});
  min-height: var(--min-height, #{rem($size)});
}

@mixin box-upd($size) {
  --width: #{rem($size)};
  --height: #{rem($size)};
  --min-width: #{rem($size)};
  --min-height: #{rem($size)};
}

@mixin radius($size) {
  border-radius: $size;
}

@function i($props) {
  @return #{$props};
}

@mixin for-desktop() {
  @media (min-width: rem(768px)) {
    @content;
  }
}

@mixin media($size) {
  $value: map-get(variables.$breakpoints, $size);
  @if $value {
    @media (min-width: rem($value)) {
      @content;
    }
  }
}

@mixin calc-ratio($a, $b) {
  &:before {
    content: '';
    display: block;
    width: 100%;
    padding-top: calc($a / $b  * 100%);
  }
}

@mixin ratio($w, $h) {
  &:before {
    content: '';
    display: block;
    width: 100%;
    padding-top: math.div($h, $w)  * 100%;
  }
}

@function column($columns_count) {
  $percents: math.div(100%, $columns_count);
  $offset: math.div($columns_count, $columns_count + 1);
  @return #{$percents};
}


@mixin scrollbar {
  --scrollbar-color-thumb: var(--field-00-click);
  --scrollbar-color-track: transparent;
  --scrollbar-width: thin;
  --scrollbar-width-legacy: 4px;

  @supports (scrollbar-width: auto) {
    scrollbar-color: var(--scrollbar-color-thumb) var(--scrollbar-color-track);
    scrollbar-width: var(--scrollbar-width);
  }

  @supports selector(::-webkit-scrollbar) {
    &::-webkit-scrollbar-thumb {
      background: var(--scrollbar-color-thumb);
      border-radius: 8px;
    }

    &::-webkit-scrollbar-track {
      background-color: var(--scrollbar-color-track);
    }

    &::-webkit-scrollbar {
      max-width: var(--scrollbar-width-legacy);
      max-height: var(--scrollbar-width-legacy);
    }
  }

  &:hover {
    --fix: ; /* This custom property invalidates styles on hover, thereby enforcing a style recomputation. This is needed to work around a bug in Safari. */
  }
}

@mixin scrollbar-hide {
  @supports (scrollbar-width: auto) {
    scrollbar-width: unset;
  }

  @supports selector(::-webkit-scrollbar) {
    &::-webkit-scrollbar {
      display: none;
      -ms-overflow-style: none;
    }
  }
}

@mixin use-hover {
  @media (hover: hover) {
    @content
  }
}

@mixin text-page-max {
  max-width: rem(1024px);
  margin: 0 auto;
}

@mixin scroll-overlay {
  overflow: hidden;

  &:before, &:after {
    content: '';
    position: absolute;
    top: 0;
    bottom: 0;
    width: 24px;
    background-color: var(--layer-01);
    z-index: 2;
  }

  &:before {
    left: 0;
  }

  &:after {
    right: 0;
  }
}

@mixin line-clamp($rows: 3) {
  display: -webkit-box;
  -webkit-line-clamp: $rows;
  -webkit-box-orient: vertical;
  overflow: hidden;
}
